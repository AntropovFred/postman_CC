{
	"info": {
		"_postman_id": "4b4f6258-1207-4e0c-bd00-03de82979fca",
		"name": "СС_Tests Realise ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ежедневные тесты",
			"item": [
				{
					"name": "val_new_ext проверки 1 дня, дамп 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c468a33b-5e37-45de-8ad5-73598bfb2b96",
								"exec": [
									"var responseJSON;",
									"var L = {",
									"    Debug:false,",
									"    file_template: {",
									"        \"used_now\": true,",
									"        \"Num_mist\": 0,",
									"        \"Checks\": [{",
									"            \"descript\": \"group\",",
									"            \"num\": 0,",
									"            \"Id_Mists\": [{",
									"                \"id\": 0,",
									"                \"text\": \"строка\"",
									"            }]",
									"        }]",
									"    },",
									"    mist_templ: {",
									"        \"id\": 0,",
									"        \"text\": \"string\"",
									"    },",
									"    Checks_template: {",
									"        \"descript\": \"groupa\",",
									"        \"num\": 0,",
									"        \"Id_Mists\": [{",
									"            \"id\": 0,",
									"            \"text\": \"строка 1\"",
									"        }]",
									"    },",
									"    File: null,",
									"    add_result: function(conditions, group_mist, text_mist, File, i) {",
									"        {",
									"            File.Checks[i].num++;",
									"                if (!conditions) {",
									"                    mist = _.cloneDeep(this.mist_templ);",
									"                    mist.text = text_mist;",
									"                    mist.id = File.Num_mist;",
									"                    File.Checks[i].Id_Mists.push(mist);",
									"                    File.Num_mist++;",
									"                }",
									"        }",
									"    },",
									"    write: function(conditions, group_mist, text_mist) {",
									"        if (!this.File) //если лога не было",
									"        {   ",
									"            this.File = this.file_template;",
									"            this.File.Checks[0].descript = group_mist;",
									"        }",
									"        for (var i = 0; i < this.File.Checks.length; i++) //если лог существует",
									"        {",
									"            if (this.File.Checks[i].descript == group_mist) {",
									"                this.add_result(conditions, group_mist, text_mist, this.File, i);",
									"                break;",
									"            }",
									"            if (i == this.File.Checks.length - 1) {",
									"                i++;",
									"                this.File.Checks[i] = _.cloneDeep(this.Checks_template);",
									"                this.File.Checks[i].descript = group_mist;",
									"                this.add_result(conditions, group_mist, text_mist, this.File, i);",
									"            }",
									"        }",
									"    },",
									"    save: function(file_env) {",
									"        if (!pm.environment.get(file_env)) {",
									"            pm.globals.set(\"file_env\", this.File);",
									"        } else {",
									"            console.log(\"Файл не пустой\");",
									"        }",
									"    },",
									"    print: function(detail, group) {",
									"        if (!this.File) {",
									"            console.log(\"Файл пустой\");",
									"            ",
									"            return;",
									"        }",
									"        if (detail == \"no\") {",
									"            for (var i = 0; i < this.File.Checks.length; i++) {",
									"                tests[this.File.Checks[i].descript] = (this.File.Checks[i].Id_Mists.length == 1);",
									"            }",
									"        }",
									"        if ((detail == \"yes\") & (group != \"all\")) {",
									"            //console.log(\"число     \"+ this.File.Checks.length)",
									"            for (var j = 0; j < this.File.Checks.length; j++) {",
									"                tests[this.File.Checks[j].descript] = (this.File.Checks[j].Id_Mists.length == 1);",
									"                if (this.File.Checks[j].descript == group) {",
									"                    if (this.File.Checks[j].Id_Mists.length > 1) {",
									"                        for (var k = 1; k < this.File.Checks[j].Id_Mists.length; k++) {",
									"                            tests[this.File.Checks[j].descript + \"  \" + this.File.Checks[j].Id_Mists[k].text] = (false);",
									"                        }",
									"                    } else {",
									"                        tests[this.File.Checks[j].descript] = true;",
									"                    }",
									"                }",
									"            }",
									"        }",
									"        if ((detail == \"yes\") & (group == \"all\")) {",
									"            console.log(\"i    \" + this.File.Checks.length);",
									"            for (var j = 0; j < this.File.Checks.length; j++) {",
									"                if (this.File.Checks[j].Id_Mists.length > 1) {",
									"                    for (var k = 1; k < this.File.Checks[j].Id_Mists.length; k++) {",
									"                        tests[this.File.Checks[j].descript + \"  \" + this.File.Checks[j].Id_Mists[k].text] = (false);",
									"                    }",
									"                } else {",
									"                    tests[this.File.Checks[j].descript] = true;",
									"                }",
									"            }",
									"        }",
									"        L.prosto=0;",
									"    },",
									"    check: function(conditions, test, detail) {",
									"        if (!conditions) {",
									"            Check_result = \"ОШИБКА ТЕСТА\";",
									"        } else {",
									"            Check_result = \"тест пройден\";",
									"        }",
									"        this.write(conditions, test, detail);",
									"        if(L.Debug===true)",
									"        { ",
									"        console.log(Check_result + \":  \" + detail);",
									"        }",
									"        return conditions;",
									"    },",
									"    prosto:0,",
									"    O:function(metka)",
									"    {  ",
									"        if (metka===null)",
									"        {metka=\"!!\" }",
									"        if(L.Debug===false)",
									"        {",
									"        console.log(metka+\" отладка!!! \"+L.prosto);",
									"        L.prosto++;",
									"        }",
									"        ",
									"    }",
									"    ",
									"};",
									"",
									"function Consist_Obj_Val_New_EXT(obj) //проверка на консистентость изменяемых данных в getvaluationnew",
									"{",
									"    ",
									"    var Obj_temp = pm.environment.get(\"Obj_EXT_templ\");",
									"    function numeric_test(obj, templ) {",
									"     ",
									"    Object.keys(Obj_temp).forEach(function(prop_name) {",
									"            var length_templ=0;",
									"            var length_obj=0;",
									"            if (typeof(templ[prop_name]) == \"number\")",
									"            {",
									"                if (String(templ[prop_name]).split('.')[1]) {length_templ=(String(templ[prop_name]).split('.')[1]).length}",
									"                if (String(obj[prop_name]).split('.')[1]) {length_obj=(String(obj[prop_name]).split('.')[1]).length}  ",
									"                return L.check((length_obj <= length_templ),",
									"                        \"Количество десятичных знаков не больше допустимого\",",
									"                        \"(\" + length_templ + \"): \" + length_obj + \" у ISIN:\" + obj[\"isin\"] + \" в поле \" + prop_name);",
									"            }",
									"",
									"        });    ",
									"         ",
									"         }",
									"    var s4et = {",
									"        boolean: function(expression, result) {",
									"            var length_num = 0;",
									"            if (String(result).split('.')[1]) {",
									"                length_num = String(result).split('.')[1].length;",
									"            }",
									"            var delta=((expression-result)/result)*100;",
									"            //console.log(\"решение \" + expression+ \" - \" + result.toFixed(length_num) + \"  =\"+delta+\"<0.01\" + (delta<=0.01))",
									"            return delta<=0.01;",
									"            //return (expression.toFixed(length_num) == result)//(1!) эталонный вариант",
									"            ",
									"",
									"        },",
									"        numeric: function(expression, result) {",
									"            var length_num = 0;",
									"            if (String(result).split('.')[1]) {",
									"                length_num = String(result).split('.')[1].length;",
									"            }",
									"            var delta=((expression-result)/result)*100;",
									"            return delta ;",
									"            //return expression.toFixed(length_num)//(1!) эталонный вариант ",
									"        }",
									"    };",
									"    function Round(a,b)",
									"    {",
									"        ",
									"",
									"        return (Math.round(a*Math.pow(10,b)))/Math.pow(10,b)",
									"",
									"    }",
									"    //Copy-past, тесты прошла :",
									"    L.check((Object.keys(obj).length === Object.keys(Obj_temp).length && Object.keys(obj).sort().every(function(value, index) {",
									"        return value === Object.keys(Obj_temp).sort()[index];",
									"    })), \"Объект соответствуют ожиданиям \", \"ISIN: \" + obj[\"isin\"]);",
									"    //Блок проверки кастомный",
									"    ",
									"    ",
									"    //проверка границ для всех кроме mortage_bond",
									"    if (obj.type!=\"mortgage_bond\")",
									"    {",
									"        ",
									"        for (var i = 1; i < 4; i++) {",
									"        L.check((obj[\"lbound\" + i] <= obj[\"method\" + i + \"_price\"]), \"Нижняя граница \"+i+\"-го метода в норме \", \"проверка нижней границы \"+i+\"-го метода ISIN: \" + obj.isin + \"  \" + obj[\"lbound\" + i] + \" < \" + obj[\"method\" + i + \"_price\"] );",
									"        L.check((obj[\"ubound\" + i] >= obj[\"method\" + i + \"_price\"]), \"Верхняя граница \"+i+\"-го метода в норме \", \"проверка верхней границы \"+i+\"-го метода ISIN: \" + obj.isin + \"  \" + obj[\"ubound\" + i] + \" > \" + obj[\"method\" + i + \"_price\"] );",
									"        }",
									"     ",
									"        L.check((Round(obj[\"method\" + obj.method_number + \"_price\"],2) == obj.valuation_price_pct), \"Опубликована верная цена \", \"соответствие цены итоговой и метода ISIN: \" + obj.isin + \"  \" + obj[\"method\" + obj.method_number + \"_price\"].toFixed(2) + \" = \" + obj.valuation_price_pct );",
									"        L.check((Round(obj[\"ubound\" + obj.method_number],2) == obj.valuation_price_ubound), \"Опубликована верная верхняя граница \", \"соответствие верхней границы итоговой и метода ISIN: \" + obj.isin + \"  \" + obj[\"ubound\" + obj.method_number].toFixed(2) + \" = \" + obj.valuation_price_ubound );",
									"        L.check((Round(obj[\"lbound\" + obj[\"method_number\"]],2) == obj.valuation_price_lbound), \"Опубликована верная нижняя граница \", \"соответствие верхней границы итоговой и метода ISIN: \" + obj.isin + \"  \" + obj[\"lbound\" + obj.method_number].toFixed(2) + \" = \" + obj.valuation_price_lbound );",
									"        ",
									"    }",
									"    //Для напоминания и хоть какой-то проверки ипотек",
									"    if (obj.type==\"mortgage_bond\")",
									"    {",
									"        L.check((obj.valuation_price_lbound <= obj.valuation_price_pct), \"ИПАТЕКИ Нижняя граница  в норме \", \"ISIN: \" + obj.isin + \"  \" + obj.valuation_price_lbound + \" < \" + obj.valuation_price_pct );",
									"        L.check((obj.valuation_price_ubound >= obj.valuation_price_pct), \"ИПАТЕКИ Верхняя граница метода в норме \", \"ISIN: \" + obj.isin + \"  \" + obj.valuation_price_ubound + \" > \" + obj.valuation_price_pct );  ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    ",
									"    ",
									"    var expr=obj[\"method\" + obj.method_number + \"_price\"] * obj.nominal/100; //для укорочения",
									"    L.check(s4et.boolean(expr, obj.valuation_price),",
									"    \" Цена при перемножении совпадает с опубликованной(delta<0.01%) \", ",
									"    \"у ISIN: \" + obj.isin +\" разница \" + s4et.numeric(expr, obj.valuation_price) + \" % \"); //(1!!!)",
									"    /*L.check(s4et.boolean(expr, obj.valuation_price),",
									"    \"совпадает итог перемножения\",",
									"    \"совпадает итог, цена: \" + obj.valuation_price + \" расчет: \" + s4et.numeric(expr, obj.valuation_price) + \" у ISIN:\" + obj.isin);*/ //(1!!!)",
									"    ",
									"    ",
									"    numeric_test(obj, Obj_temp);",
									"    ",
									"}",
									"",
									"let Consist_intra_day=//0k, pawet",
									"{   ",
									"    Const_templ:{},",
									"    etalon:function(array)",
									"    {",
									"        function last_day(element, index, array)",
									"        {",
									"        if (element[\"val_date\"]==pm.environment.get(\"date_two\")){return true}",
									"        else{return false}}",
									"        var i=array.findIndex(last_day)",
									"        Object.keys(pm.environment.get(\"const_Intra_day_EXT\")).forEach(function(prop_name) {",
									"        Consist_intra_day.Const_templ[prop_name]=array[i][prop_name]",
									"        });",
									"        },",
									"    check:function(array)",
									"    {",
									"        Consist_intra_day.etalon(array);",
									"        console.log(Consist_intra_day.Const_templ)",
									"        array.forEach(function(Obj) {",
									"        if (Obj[\"val_date\"]==pm.environment.get(\"date_two\")){",
									"             Object.keys(Consist_intra_day.Const_templ).forEach(function(prop_name) {",
									"               L.check((Consist_intra_day.Const_templ[prop_name]==Obj[prop_name]),\"Постоянные значения внутри дня \",\" У ISIN: \"+ Obj[\"isin\"]+\" \"+prop_name+\":\"+Obj[prop_name]+\"=\"+Consist_intra_day.Const_templ[prop_name])",
									"            });",
									"        }",
									"",
									"       /* ",
									"        Object.keys(this.Const_templ).forEach(function(prop_name) {",
									"            L.check((this.Const_templ[prop_name]==Obj[prop_name]),\"Постоянные значения внутри дня\", Obj[\"isin\"]+\" \"+prop_name+\":\"+Obj[prop_name]+\"=\"+this.Const_templ[prop_name])  ",
									"            });",
									"         */   ",
									"    });",
									"    }",
									"}",
									"",
									"",
									"try ",
									"    {",
									"        responseJSON = JSON.parse(responseBody);",
									"        tests['response is valid JSON'] = true;",
									"       pm.environment.set(\"Dump_EXT\", responseJSON); ",
									"}",
									"catch (e) ",
									"{",
									"    responseJSON = {};",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"//Consist_intra_day.check(responseJSON)",
									"responseJSON.forEach(function(Obj) {",
									"    if (Obj[\"val_date\"]==pm.environment.get(\"date_two\")){",
									"    Consist_Obj_Val_New_EXT(Obj);",
									"    }",
									"});",
									"",
									"L.print(\"yes\", \"all\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1aad07c5-609b-42b5-8fc9-6489e3ac02f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/valuationnewext?product=5&apikey={{APIKEY}}&filter={\"val_date\":{\"$in\":[\"{{date_one}}\",\"{{date_two}}\"]}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"valuationnewext"
							],
							"query": [
								{
									"key": "product",
									"value": "5"
								},
								{
									"key": "skip",
									"value": "1",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "{\"val_date\":{\"$in\":[\"{{date_one}}\",\"{{date_two}}\"]},\"isin\":{\"$in\":[\"RU000A0JTJL3\",\"RU000A0JS3W6\"]}}",
									"disabled": true
								},
								{
									"key": "apikey",
									"value": "{{APIKEY}}"
								},
								{
									"key": "filter",
									"value": "{\"val_date\":{\"$in\":[\"{{date_two}}\"]}}",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50",
									"disabled": true
								},
								{
									"key": "include",
									"value": " industry",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "{\"val_date\":{\"$in\":[\"{{date_one}}\",\"{{date_two}}\"]}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "val_new проверки 1 дня, дамп 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "feee067b-ee46-459b-823c-1a9ee82d6984",
								"exec": [
									"var responseJSON;",
									"var L = {",
									"    Debug:true,",
									"    file_template: {",
									"        \"used_now\": true,",
									"        \"Num_mist\": 0,",
									"        \"Checks\": [{",
									"            \"descript\": \"group\",",
									"            \"num\": 0,",
									"            \"Id_Mists\": [{",
									"                \"id\": 0,",
									"                \"text\": \"строка\"",
									"            }]",
									"        }]",
									"    },",
									"    mist_templ: {",
									"        \"id\": 0,",
									"        \"text\": \"string\"",
									"    },",
									"    Checks_template: {",
									"        \"descript\": \"groupa\",",
									"        \"num\": 0,",
									"        \"Id_Mists\": [{",
									"            \"id\": 0,",
									"            \"text\": \"строка 1\"",
									"        }]",
									"    },",
									"    File: null,",
									"    add_result: function(conditions, group_mist, text_mist, File, i) {",
									"        {",
									"            File.Checks[i].num++;",
									"                if (!conditions) {",
									"                    mist = _.cloneDeep(this.mist_templ);",
									"                    mist.text = text_mist;",
									"                    mist.id = File.Num_mist;",
									"                    File.Checks[i].Id_Mists.push(mist);",
									"                    File.Num_mist++;",
									"                }",
									"        }",
									"    },",
									"    write: function(conditions, group_mist, text_mist) {",
									"        if (!this.File) //если лога не было",
									"        {",
									"            this.File = this.file_template;",
									"            this.File.Checks[0].descript = group_mist;",
									"        }",
									"        for (var i = 0; i < this.File.Checks.length; i++) //если лог существует",
									"        {",
									"            if (this.File.Checks[i].descript == group_mist) {",
									"                this.add_result(conditions, group_mist, text_mist, this.File, i);",
									"                break;",
									"            }",
									"            if (i == this.File.Checks.length - 1) {",
									"                i++;",
									"                this.File.Checks[i] = _.cloneDeep(this.Checks_template);",
									"                this.File.Checks[i].descript = group_mist;",
									"                this.add_result(conditions, group_mist, text_mist, this.File, i);",
									"            }",
									"        }",
									"    },",
									"    save: function(file_env) {",
									"        if (!pm.environment.get(file_env)) {",
									"            pm.globals.set(\"file_env\", this.File);",
									"        } else {",
									"            console.log(\"Файл не пустой\");",
									"        }",
									"    },",
									"    print: function(detail, group) {",
									"        if (!this.File) {",
									"            console.log(\"Файл пустой\");",
									"            tests[\"проверки проводились\"] = false;",
									"            return;",
									"        }",
									"        if (detail == \"no\") {",
									"            for (var i = 0; i < this.File.Checks.length; i++) {",
									"                tests[this.File.Checks[i].descript] = (this.File.Checks[i].Id_Mists.length == 1);",
									"            }",
									"        }",
									"        if ((detail == \"yes\") & (group != \"all\")) {",
									"            //console.log(\"число     \"+ this.File.Checks.length)",
									"            for (var j = 0; j < this.File.Checks.length; j++) {",
									"                tests[this.File.Checks[j].descript] = (this.File.Checks[j].Id_Mists.length == 1);",
									"                if (this.File.Checks[j].descript == group) {",
									"                    if (this.File.Checks[j].Id_Mists.length > 1) {",
									"                        for (var k = 1; k < this.File.Checks[j].Id_Mists.length; k++) {",
									"                            tests[this.File.Checks[j].descript + \"  \" + this.File.Checks[j].Id_Mists[k].text] = (false);",
									"                        }",
									"                    } else {",
									"                        tests[this.File.Checks[j].descript] = true;",
									"                    }",
									"                }",
									"            }",
									"        }",
									"        if ((detail == \"yes\") & (group == \"all\")) {",
									"            console.log(\"i    \" + this.File.Checks.length);",
									"            for (var j = 0; j < this.File.Checks.length; j++) {",
									"                if (this.File.Checks[j].Id_Mists.length > 1) {",
									"                    for (var k = 1; k < this.File.Checks[j].Id_Mists.length; k++) {",
									"                        tests[this.File.Checks[j].descript + \"  \" + this.File.Checks[j].Id_Mists[k].text] = (false);",
									"                    }",
									"                } else {",
									"                    tests[this.File.Checks[j].descript] = true;",
									"                }",
									"            }",
									"        }",
									"        L.prosto=0;",
									"    },",
									"    check: function(conditions, test, detail) {",
									"        if (!conditions) { this.O(\"ОШИБКА ТЕСТА(отладка)\"+detail);",
									"            Check_result = \"ОШИБКА ТЕСТА\";",
									"        } else {",
									"            Check_result = \"тест пройден\";",
									"        }",
									"        this.write(conditions, test, detail);",
									"        if(L.Debug===false)",
									"        { ",
									"        console.log(Check_result + \":  \" + detail);",
									"        }",
									"        return conditions;",
									"    },",
									"    prosto:0,",
									"    O:function(metka)",
									"    {  ",
									"        if (metka===null)",
									"        {metka=\"!!!\" }",
									"        if(L.Debug===true)",
									"        {",
									"        console.log(metka+\" отладка!!! \"+L.prosto);",
									"        L.prosto++;",
									"        }",
									"        ",
									"    },",
									"    Treat_Parse_errors:function(number)",
									"    {",
									"    reg1 = /9{6,12}(?=([1-9]{1})$)/;",
									"    reg2 = /0{6,12}(?=([1-9]{1})$)/;",
									"    //regular4 = /(0{6,9}(?=([1-4]{1})$))|(9{6,9}(?=([6-9]{1})$))/",
									"    result=number;",
									"    if (reg1.test(String(result))) {",
									"        result = Number(String(result).split(reg1)[0]); //+ (1 / Math.pow(10, (String(result).split(reg1)[0].split('.')[1]).length))(!КОСТЫЛЬ)",
									"    }",
									"    if  (reg2.test(String(result))) {",
									"        result = Number(String(result).split(reg2)[0]);",
									"    }",
									"    //console.log(\"Итог \"+result)",
									"    return result;",
									"}",
									"    ",
									"};",
									"",
									"",
									"",
									"",
									"",
									"",
									"function Consist_Obj_Val_New(obj)//проверка на консистентость изменяемых данных в getvaluationnew",
									"{",
									"    var Obj_temp = pm.environment.get(\"Obj_NEW_templ\");",
									"    function numeric_test(obj, templ) {",
									"     ",
									"    Object.keys(Obj_temp).forEach(function(prop_name) {",
									"            var length_templ=0;",
									"            var length_obj=0;",
									"            if (typeof(templ[prop_name]) == \"number\")",
									"            {",
									"            treat_num=L.Treat_Parse_errors(obj[prop_name]);",
									"            if (String(templ[prop_name]).split('.')[1]) {length_templ=(String(templ[prop_name]).split('.')[1]).length; }",
									"            if (String(treat_num).split('.')[1]) {length_obj=(String(treat_num).split('.')[1]).length;}  ",
									"                        return L.check((length_obj <= length_templ),",
									"                        \"Количество десятичных знаков не больше допустимого\",",
									"                        \" (\" + length_templ + \"): \" + length_obj + \" у ISIN:\" + obj[\"isin\"] + \" в поле \" + prop_name+\": \"+ obj[prop_name]);",
									"            }",
									"",
									"        });    ",
									"         ",
									"         }",
									"    //Copy-past, тесты прошла:",
									"    ",
									"    L.check((Object.keys(obj).length === Object.keys(Obj_temp).length && Object.keys(obj).sort().every(function(value, index) {",
									"        return value === Object.keys(Obj_temp).sort()[index];",
									"    })), \"Объект соответствуют ожиданиям\",\" ISIN: \"+ obj[\"isin\"]);",
									"    ",
									"    ",
									"    ",
									"    //Блок проверки кастомный",
									"    L.check((obj[\"rate_lbound\"]<=obj[\"rate\"]),\"Нижняя граница в норме \",\"ISIN: \"+obj[\"isin\"]+\" \"+obj[\"rate_lbound\"] +\" < \"+obj[\"rate\"]+\" среднего\");",
									"    L.check((obj[\"rate_ubound\"]>=obj[\"rate\"]),\"Верхняя граница в норме  \",\"ISIN: \"+obj[\"isin\"]+\" \"+obj[\"rate_ubound\"] +\" > \"+obj[\"rate\"]+\" среднего\");",
									"    /*L.check(((obj[\"price\"]-obj[\"rate\"]*obj[\"nominal\"]/100)<100*Number.EPSILON),\"совпадает итог перемножения\" ,\"разница \"+(obj[\"price\"]-obj[\"rate\"]*obj[\"nominal\"]/100)+\" у ISIN:\"+obj[\"isin\"]);*/",
									"    L.check(((obj[\"price\"]-obj[\"rate\"]*obj[\"nominal\"]/100)<obj[\"price\"]*0.0001),\"ЯКОБЫ Совпадает итог перемножения\" ,\"ISIN: \"+obj[\"isin\"]+\". \"+\"Разница \"+(obj[\"price\"]-obj[\"rate\"]*obj[\"nominal\"]/100));",
									"     //let length_num=[\"price\",\"rate_lbound\",\"rate_ubound\",\"nominal\"];//массив для numeric_test значений, проверяемых на длинну",
									"    numeric_test(obj,Obj_temp);",
									"}",
									"",
									"",
									"   /* function Equal_intra_day(obj, ArrConst) //проверка на стабильные величины",
									"    {",
									"    for (var propName in obj2) {",
									"        if (ArrConst.includes(propName)) {",
									"            L.check(obj1[propName] == obj2[propName], \"Постоянные значение у бумаги\", \"Постоянные значение \" + propName + \" у \" + obj1.isin + \" и \" + obj2.isin + \" совпадают\");",
									"        }",
									"    }",
									"}*/",
									"",
									"",
									"",
									"",
									"",
									"",
									"try",
									"{",
									"    responseJSON = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    ",
									"pm.environment.set(\"Dump_New\", responseJSON);",
									"} ",
									"catch (e) ",
									"{",
									"    responseJSON = {};",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"",
									"responseJSON.forEach(function(Obj) {",
									"  if (Obj[\"val_date\"]==pm.environment.get(\"date_two\")){  ",
									"  Consist_Obj_Val_New(Obj);",
									"  }",
									"});",
									"",
									"L.print(\"yes\",\"all\")",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40def7ae-f17e-4eeb-9bed-c6e552658567",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/valuationnew?product=5&apikey={{APIKEY}}&filter={\"val_date\":{\"$in\":[\"{{date_one}}\",\"{{date_two}}\"]}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"valuationnew"
							],
							"query": [
								{
									"key": "product",
									"value": "5"
								},
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								},
								{
									"key": "skip",
									"value": "22",
									"disabled": true
								},
								{
									"key": "apikey",
									"value": "{{APIKEY}}"
								},
								{
									"key": "filter",
									"value": "{\"val_date\":{\"$in\":[\"{{date_one}}\",\"{{date_two}}\"]},\"isin\":{\"$in\":[\"RU000A0JNYN1\",\"RU000A0JWTX1\",\"RU000A0JWTL6 \",\"RU000A0JWTH4\",\"RU000A0JW316\"]}}",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "{\"val_date\":{\"$in\":[\"{{date_one}}\",\"{{date_two}}\"]}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "консистентность между методами и мониторинг",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fbe17ed-3553-4807-a5fe-ef5ef6b3d879",
								"exec": [
									"var responseJSON;",
									"var L = {",
									"    Debug:true,",
									"    file_template: {",
									"        \"used_now\": true,",
									"        \"Num_mist\": 0,",
									"        \"Checks\": [{",
									"            \"descript\": \"group\",",
									"            \"num\": 0,",
									"            \"Id_Mists\": [{",
									"                \"id\": 0,",
									"                \"text\": \"строка\"",
									"            }]",
									"        }]",
									"    },",
									"    mist_templ: {",
									"        \"id\": 0,",
									"        \"text\": \"string\"",
									"    },",
									"    Checks_template: {",
									"        \"descript\": \"groupa\",",
									"        \"num\": 0,",
									"        \"Id_Mists\": [{",
									"            \"id\": 0,",
									"            \"text\": \"строка 1\"",
									"        }]",
									"    },",
									"    File: null,",
									"    add_result: function(conditions, group_mist, text_mist, File, i) {",
									"        {",
									"            File.Checks[i].num++;",
									"                if (!conditions) {",
									"                    mist = _.cloneDeep(this.mist_templ);",
									"                    mist.text = text_mist;",
									"                    mist.id = File.Num_mist;",
									"                    File.Checks[i].Id_Mists.push(mist);",
									"                    File.Num_mist++;",
									"                }",
									"        }",
									"    },",
									"    write: function(conditions, group_mist, text_mist) {",
									"        if (!this.File) //если лога не было",
									"        {",
									"            this.File = this.file_template;",
									"            this.File.Checks[0].descript = group_mist;",
									"        }",
									"        for (var i = 0; i < this.File.Checks.length; i++) //если лог существует",
									"        {",
									"            if (this.File.Checks[i].descript == group_mist) {",
									"                this.add_result(conditions, group_mist, text_mist, this.File, i);",
									"                break;",
									"            }",
									"            if (i == this.File.Checks.length - 1) {",
									"                i++;",
									"                this.File.Checks[i] = _.cloneDeep(this.Checks_template);",
									"                this.File.Checks[i].descript = group_mist;",
									"                this.add_result(conditions, group_mist, text_mist, this.File, i);",
									"            }",
									"        }",
									"    },",
									"    save: function(file_env) {",
									"        if (!pm.environment.get(file_env)) {",
									"            pm.globals.set(\"file_env\", this.File);",
									"        } else {",
									"            console.log(\"Файл не пустой\");",
									"        }",
									"    },",
									"    print: function(detail, group) {",
									"        if (!this.File) {",
									"            console.log(\"Файл пустой\");",
									"            tests[\"проверки проводились\"] = false;",
									"            return;",
									"        }",
									"        if (detail == \"no\") {",
									"            for (var i = 0; i < this.File.Checks.length; i++) {",
									"                tests[this.File.Checks[i].descript] = (this.File.Checks[i].Id_Mists.length == 1);",
									"            }",
									"        }",
									"        if ((detail == \"yes\") & (group != \"all\")) {",
									"            for (var j = 0; j < this.File.Checks.length; j++) {",
									"                tests[this.File.Checks[j].descript] = (this.File.Checks[j].Id_Mists.length == 1);",
									"                if (this.File.Checks[j].descript == group) {",
									"                    if (this.File.Checks[j].Id_Mists.length > 1) {",
									"                        for (var k = 1; k < this.File.Checks[j].Id_Mists.length; k++) {",
									"                            tests[this.File.Checks[j].descript + \"  \" + this.File.Checks[j].Id_Mists[k].text] = (false);",
									"                        }",
									"                    } else {",
									"                        tests[this.File.Checks[j].descript] = true;",
									"                    }",
									"                }",
									"            }",
									"        }",
									"        if ((detail == \"yes\") & (group == \"all\")) {",
									"            console.log(\"i    \" + this.File.Checks.length);",
									"            for (var j = 0; j < this.File.Checks.length; j++) {",
									"                if (this.File.Checks[j].Id_Mists.length > 1) {",
									"                    for (var k = 1; k < this.File.Checks[j].Id_Mists.length; k++) {",
									"                        tests[this.File.Checks[j].descript + \"  \" + this.File.Checks[j].Id_Mists[k].text] = (false);",
									"                    }",
									"                } else {",
									"                    tests[this.File.Checks[j].descript] = true;",
									"                }",
									"            }",
									"        }",
									"        L.prosto=0;",
									"    },",
									"    check: function(conditions, test, detail) {",
									"        if (!conditions) { this.O(\"ОШИБКА ТЕСТА(отладка)\"+detail);",
									"            Check_result = \"ОШИБКА ТЕСТА\";",
									"        } else {",
									"            Check_result = \"тест пройден\";",
									"        }",
									"        this.write(conditions, test, detail);",
									"        if(L.Debug===false)",
									"        { ",
									"        console.log(Check_result + \":  \" + detail);",
									"        }",
									"        return conditions;",
									"    },",
									"    prosto:0,",
									"    O:function(metka)",
									"    {  ",
									"        if (metka===null)",
									"        {metka=\"!!!\" }",
									"        if(L.Debug===true)",
									"        {",
									"        console.log(metka+\" отладка!!! \"+L.prosto);",
									"        L.prosto++;",
									"        }",
									"        ",
									"    },",
									"    ",
									"    Treat_Parse_errors:function(number)",
									"    {",
									"    reg1 = /9{6,12}(?=([1-9]{1})$)/;",
									"    reg2 = /0{6,12}(?=([1-9]{1})$)/;",
									"    //regular4 = /(0{6,9}(?=([1-4]{1})$))|(9{6,9}(?=([6-9]{1})$))/",
									"    result=number;",
									"    if (reg1.test(String(result))) {",
									"        result = Number(String(result).split(reg1)[0]); //+ (1 / Math.pow(10, (String(result).split(reg1)[0].split('.')[1]).length))(!КОСТЫЛЬ)",
									"    }",
									"    if (reg2.test(String(result))) {",
									"        result = Number(String(result).split(reg2)[0]);",
									"    }",
									"    //console.log(\"Итог \"+result)",
									"    return result;",
									"}",
									"    ",
									"};//объект логирования и проверок",
									"var monitor={",
									"    RAW:{",
									"            ValNew_One:[],",
									"            ValEXT_One:[],",
									"            ValNew_Two:[],",
									"            ValEXT_Two:[],",
									"            Take:function (arr1,arr2){",
									"            function Sort_isin(a, b) {",
									"              if (a.isin > b.isin) {return 1;}",
									"              if (a.isin < b.isin) {return -1;}",
									"              return 0;",
									"            }",
									"                this.ValNew_One=arr1.filter(arr1 =>arr1[\"val_date\"]==pm.environment.get(\"date_one\")).sort(Sort_isin);",
									"                this.ValEXT_One=arr2.filter(arr2 =>arr2[\"val_date\"]==pm.environment.get(\"date_one\")).sort(Sort_isin);",
									"                this.ValNew_Two=arr1.filter(arr1 =>arr1[\"val_date\"]==pm.environment.get(\"date_two\")).sort(Sort_isin);",
									"                this.ValEXT_Two=arr2.filter(arr2 =>arr2[\"val_date\"]==pm.environment.get(\"date_two\")).sort(Sort_isin);",
									"            },",
									"            ",
									"        },",
									"    date_temple:{",
									"        \"currency_code\": \"constant\",",
									"        \"issuer\": \"constant\",",
									"        \"name\": \"constant\",",
									"        \"nominal\": \"constant_or_CA_nom\",",
									"        \"nsd_code\": \"constant\",",
									"        \"price\": \"no\",",
									"        \"rate\": \"no\",",
									"        \"rate_lbound\": \"no\",",
									"        \"rate_ubound\": \"no\",",
									"        \"reg_number\": \"no\",",
									"        \"type\": \"constant\",",
									"        \"val_date\": \"no\",",
									"        \"version\": \"constant\",",
									"        //\"duration\": \"default\", //отключил, изменения в схеме",
									"        \"duration3\": \"no\",",
									"        \"f1\": \"no\",",
									"        \"f2\": \"no\",",
									"        \"hh\": \"no\",",
									"        \"il\": \"no\",",
									"        \"il4\": \"no\",",
									"        \"index_code\": \"no\",",
									"        \"industry\": \"no\",",
									"        \"ispread2\": \"no\",",
									"        \"method1_price\": \"no\",",
									"        \"method2_price\": \"no\",",
									"        \"method3_price\": \"no\",",
									"        \"method_number\": \"no\",",
									"        \"num_trades\": \"no\",",
									"        \"on_the_run\": \"no\" ",
									"        },//объект-справочник, для записи просматриваемых параметров, ссылки на типы проверок",
									"    checks_types:{",
									"        \"no\":function(a,b,prop,isin){/*для консистентности*/},",
									"        \"need_checking\":function(c,property){",
									"            if (c==monitor.date_temple[property])",
									"                {return false} ",
									"            else {return true}",
									"        },",
									"        \"Check_CA\":function(Isin,CA_DUMP,ARR_CA_Types){ ",
									"            return ARR_CA_Types.some(CA=>(CA_DUMP.some(y => ((y.corp_action_type.code==CA)&&(y.state.name==\"Состоялось\")&&(y.securities.some(x => x.isin==Isin))) )))},//для всех CA из массива, есть ли CA, которое состоялось, и внутри которого есть бумага внутри",
									"        \"constant\":function(a,b,prop,isin){",
									"            if (this.need_checking(b,prop)){",
									"            L.check(a===b,\"Постоянные свойства не изменились\",\" ISIN: \"+isin+\" свойство \"+prop+\" не изменилось \"+ a+\"=>\"+b);",
									"                }",
									"        },",
									"        \"constant_or_CA_nom\":function(a,b,prop,isin){",
									"            if (this.need_checking(b,prop)){",
									"                if(a===b){L.check(true,\"Свойства ожидаемо изменялись\",\" ISIN: \"+isin+\" свойство \"+prop+\" не изменилось \"+ a+\"=>\"+b)}",
									"                else{",
									"                    ARR_CA=[\"DRAW\",\"DSCL\",\"MCAL/BN\",\"INTR\"]; //массив КД",
									"                    ",
									"                    L.check(this.Check_CA(isin,pm.environment.get(\"Dump_CA\"),ARR_CA),\"Свойства ожидаемо изменялись\",\" ISIN: \"+isin+\" свойство \"+prop+\" ожидаемо изменилось \"+ a+\"=>\"+b)",
									"                }",
									"            }",
									"        },",
									"        \"delta 5 %\":function(a,b,prop,isin){",
									"            if (this.need_checking(b,prop)){",
									"                L.check((Math.abs(a-b)<5),\"Разница в цене между днями не более 5 %\",\" ISIN: \"+isin+\" разница в цене между днями \"+(a-b)+\"<5%\")",
									"            }",
									"        }",
									"    },//типы проверок",
									"    Sec_temple:{",
									"            \"isin\":\"default\",",
									"            \"day\":[]",
									"        },//больше для справки о том как выглядит, формируется по-другому но в соответствии",
									"    processed_data:[],",
									"    FindDel:function(obj,arr){",
									"            var i=arr.findIndex(x => x.isin == obj.isin)",
									"            if (i==-1){/*console.log(obj.isin+\" не найдено!!! Хочу упасть, тут или попозже?!\")*/}",
									"            else {ResObj=arr[i];arr.splice(i,1); return ResObj}",
									"        },",
									"    template:function(arr1,arr2){",
									"        this.RAW.Take(arr1,arr2)",
									"        safe=this.RAW.ValNew_One.length;",
									"        a=safe-1;",
									"        while ((safe)>0)",
									"            {",
									"                try ",
									"                    {   ",
									"                        if (this.processed_data==null) {tests[\"закончили штатно\"+a] = false; break}    ",
									"                        else {this.processed_data.push(this.securit()) } ",
									"                    }",
									"                catch (e) ",
									"                    {",
									"                        console.log(\"!!! \"+a)",
									"                        tests[\"УПАЛ, исходный элемент: this.RAW.ValNew_One[\"+a+\"]\"] = false;",
									"                    }",
									"                a-- ",
									"                safe--",
									"            }",
									"        ",
									"        if (this.RAW.ValNew_Two.length>0){",
									"                this.RAW.ValNew_Two.forEach(function(element) {",
									"                L.check(false,\" В рассчете появилась бумага, отсутствующая за \",pm.environment.get(\"date_one\")+ \" ISIN: \"+ element.isin)",
									"                });",
									"            }",
									"        },//обрабатываю, сугубо внутренний метод",
									"    securit:function(){  ",
									"            var Security={}",
									"            ValNew_One=this.RAW.ValNew_One.pop();",
									"            ValEXT_One=this.FindDel(ValNew_One,this.RAW.ValEXT_One)",
									"            ValNew_Two=this.FindDel(ValNew_One,this.RAW.ValNew_Two)",
									"            ValEXT_Two=this.FindDel(ValNew_One,this.RAW.ValEXT_Two)",
									"            Security.isin= ValNew_One.isin",
									"            Security.day=[]",
									"            Security.day.push(this.day(ValNew_One,ValEXT_One));",
									"            Security.day.push(this.day(ValNew_Two,ValEXT_Two));",
									"            if(Security.day[1]==this.date_temple){",
									"                ARR_CA_TYPES=[\"MCAL/BN\",\"REDM/BN\"];",
									"                L.check(this.checks_types.Check_CA(Security.isin,pm.environment.get(\"Dump_CA\"),ARR_CA_TYPES),\"Бумага ожидаемо исключена из расчета\",Security.isin);",
									"            }",
									"          return  Security ",
									"        },//формирование инфы ЦБ",
									"    day:function(obj1,obj2){",
									"        var day={}",
									"        if (obj1==null){day = this.date_temple}//учтено в securit:function",
									"        else {",
									"            Object.keys(this.date_temple).forEach(function(prop_name) {",
									"                        if (obj1.hasOwnProperty(prop_name)){day[prop_name]=obj1[prop_name];} ",
									"                        else if (obj2.hasOwnProperty(prop_name)){day[prop_name]=obj2[prop_name];}",
									"                        else {L.check(false,\"Формирование данных за день из 2-х методов. Проверьте date_temple и данные\", \" ISIN: \"+ obj1.isin)",
									"                }//!!Костыль",
									"                    });",
									"        }",
									"        return day",
									"    },//формирование дня ЦБ",
									"    security_checks:function(dump_metod1,dump_metod2){",
									"        this.template(dump_metod1,dump_metod2)",
									"",
									"        while ((this.processed_data.length)>0)",
									"        {",
									"        securit=this.processed_data.pop()",
									"        //гребаный костыль начало",
									"        var date_temple_custom=_.cloneDeep(monitor.date_temple)",
									"        if (securit.day[0][\"type\"]==\"floating_bond\"){",
									"            ",
									"            date_temple_custom.nominal=\"no\"",
									"        }",
									"        //гребаный костыль конец",
									"        Object.keys(date_temple_custom).forEach(function(prop_name) {",
									"                      monitor.checks_types[date_temple_custom[prop_name]](securit.day[0][prop_name],securit.day[1][prop_name],prop_name,securit.isin)",
									"                      //console.log(\"обращаюсь к проверке 1\"+ monitor.checks_types[\"constant\"])///ХЗ как, но надо сохранить(печатает саму функцию)!!!",
									"                    });",
									"        }",
									"    }",
									"}",
									"if (!Array.prototype.findIndex) {",
									"  Array.prototype.findIndex = function(predicate) {",
									"    if (this === null) {",
									"      throw new TypeError('Array.prototype.findIndex called on null or undefined');",
									"    }",
									"    if (typeof predicate !== 'function') {",
									"      throw new TypeError('predicate must be a function');",
									"    }",
									"    var list = Object(this);",
									"    var length = list.length >>> 0;",
									"    var thisArg = arguments[1];",
									"    var value;",
									"",
									"    for (var i = 0; i < length; i++) {",
									"      value = list[i];",
									"      if (predicate.call(thisArg, value, i, list)) {",
									"        return i;",
									"      }",
									"    }",
									"    return -1;",
									"  };",
									"}//дополнение к библиотеке",
									"function Consist_methods(arr1,arr2){",
									"    var Array1=arr1.filter(arr1 =>arr1[\"val_date\"]==pm.environment.get(\"date_two\"));",
									"    var Array2=arr2.filter(arr2 =>arr2[\"val_date\"]==pm.environment.get(\"date_two\"));",
									"    ",
									"    function Consist_Ext_and_New_Obj(Obj_new,Obj_ext)",
									"       {",
									"       var SL=//словарик, он же список проверяемых полей на консистентность",
									"            {",
									"            \"acc_int\": \"acc_int\",",
									"            \"currency_code\": \"currency_code\",",
									"            \"isin\": \"isin\",",
									"            \"nominal\": \"nominal\",",
									"            \"nsd_code\": \"ndc_code\",",
									"            \"price\": \"valuation_price\",",
									"            \"rate\": \"valuation_price_pct\",",
									"            \"rate_lbound\": \"valuation_price_lbound\",",
									"            \"rate_ubound\": \"valuation_price_ubound\",",
									"            \"type\": \"type\",",
									"            \"val_date\": \"val_date\"",
									"            }",
									"        Object.keys(SL).forEach(function(prop_name) {",
									"                   L.check((Obj_ext[SL[prop_name]]==Obj_new[prop_name]),",
									"                   \"Консистентность между методами \"+ prop_name,",
									"                   Obj_new[\"isin\"]+\" \"+prop_name+\":\"+Obj_new[prop_name]+\"=\"+Obj_ext[SL[prop_name]]+\" \"+SL[prop_name])",
									"                });",
									"       }",
									"    L.check(Array1.length==Array2.length,\"Количество записей одинаково\",\"detail\")",
									"    Array1.forEach(function(Obj_new){if (Array2.some(x => x.isin===Obj_new.isin))",
									"            {",
									"            Obj_ext=Array2.find(x => x.isin === Obj_new.isin)",
									"            Consist_Ext_and_New_Obj(Obj_new,Obj_ext)",
									"            }",
									"        else",
									"            {L.check(Array2.some(x => x.isin===Obj_new.isin),",
									"                   \"Не найдена бумага в ext\",",
									"                   \"Не найдена бумага в ext с isin:\"+ Obj_new.isin)",
									"            ",
									"            }",
									"        });}//(pm.environment.get(\"Dump_New\"),pm.environment.get(\"Dump_EXT\"))",
									"      ",
									"Consist_methods(pm.environment.get(\"Dump_New\"),pm.environment.get(\"Dump_EXT\"))",
									"",
									"",
									"try",
									"{",
									"    responseJSON = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    pm.environment.set(\"Dump_CA\", responseJSON);",
									"} ",
									"catch (e) ",
									"{",
									"    responseJSON = {};",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"monitor.security_checks(pm.environment.get(\"Dump_New\"),pm.environment.get(\"Dump_EXT\"))",
									"",
									"//дорабатываю",
									"",
									"L.print(\"yes\",\"all\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "03ae7e36-afd7-406e-94d8-d92ec8d6df13",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/corpactions?product=2&include=id,corp_action_type,state,securities.id,securities.isin&apikey={{APIKEY}}&filter={\"action_date_plan\":{\"$in\":[\"{{date_one}}\",\"{{date_two}}\"]}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"corpactions"
							],
							"query": [
								{
									"key": "limit",
									"value": "0",
									"disabled": true
								},
								{
									"key": "product",
									"value": "2"
								},
								{
									"key": "include",
									"value": "id,corp_action_type,state,securities.id,securities.isin"
								},
								{
									"key": "apikey",
									"value": "{{APIKEY}}"
								},
								{
									"key": "filter",
									"value": "{\"action_date_plan\":{\"$in\":[\"{{date_one}}\",\"{{date_two}}\"]}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "da34ce27-7d34-42da-9839-3deb34e1dfb6",
						"type": "text/javascript",
						"exec": [
							"var Length={\"16\":0.1234567890123456,",
							"            \"6\":0.123456,",
							"            \"2\":0.12,",
							"            \"4\":0.1234",
							"            }//хз зачем",
							"",
							"//блок настроек для val_new_ext",
							"Const_templ_EXT={",
							"    \"coef_alpha\":0,",
							"    \"coef_b\":0,",
							"    \"coef_banks\":0,",
							"    \"coef_beta0\":0,",
							"    \"coef_beta1\":0,",
							"    \"coef_chemistry\":0,",
							"    \"coef_construction\":0,",
							"    \"coef_electricity\":0,",
							"    \"coef_f1\":0,",
							"    \"coef_f2\":0,",
							"    \"coef_farma\":0,",
							"    \"coef_fin_service\":0,",
							"    \"coef_food\":0,",
							"    \"coef_gamma\":0,",
							"    \"coef_gov\":0,",
							"    \"coef_hh\":0,",
							"    \"coef_il\":0,",
							"    \"coef_il4\":0,",
							"    \"coef_insurance\":0,",
							"    \"coef_leasing\":0,",
							"    \"coef_light\":0,",
							"    \"coef_machinery\":0,",
							"    \"coef_media\":0,",
							"    \"coef_metal\":0,",
							"    \"coef_mining\":0,",
							"    \"coef_mortgage\":0,",
							"    \"coef_muni\":0,",
							"    \"coef_oil_gaz\":0,",
							"    \"coef_on_the_run\":0,",
							"    \"coef_other\":0,",
							"    \"coef_retail\":0,",
							"    \"coef_risk\":0,",
							"    \"coef_tech\":0,",
							"    \"coef_telecom\":0,",
							"    \"coef_transport\":0,",
							"    \"coef_traver\":0",
							"    }",
							"pm.environment.set(\"const_Intra_day_EXT\", Const_templ_EXT);",
							"var Obj_EXT_temp = {",
							"        \"acc_int\": \"20\",",
							"        \"coef_alpha\": Length[16],",
							"        \"coef_b\": Length[16],",
							"        \"coef_banks\": Length[16],",
							"        \"coef_beta0\": Length[16],",
							"        \"coef_beta1\": Length[16],",
							"        \"coef_chemistry\": Length[16],",
							"        \"coef_construction\": Length[16],",
							"        \"coef_electricity\": Length[16],",
							"        \"coef_f1\": Length[16],",
							"        \"coef_f2\": Length[16],",
							"        \"coef_farma\": Length[16],",
							"        \"coef_fin_service\": Length[16],",
							"        \"coef_food\": Length[16],",
							"        \"coef_gamma\": Length[16],",
							"        \"coef_gov\": Length[16],",
							"        \"coef_hh\": Length[16],",
							"        \"coef_il\": Length[16],",
							"        \"coef_il4\": Length[16],",
							"        \"coef_insurance\": Length[16],",
							"        \"coef_leasing\": Length[16],",
							"        \"coef_light\": Length[16],",
							"        \"coef_machinery\": Length[16],",
							"        \"coef_media\": Length[16],",
							"        \"coef_metal\": Length[16],",
							"        \"coef_mining\": Length[16],",
							"        \"coef_mortgage\": Length[16],",
							"        \"coef_muni\": Length[16],",
							"        \"coef_oil_gaz\": Length[16],",
							"        \"coef_on_the_run\": Length[16],",
							"        \"coef_other\": Length[16],",
							"        \"coef_retail\": Length[16],",
							"        \"coef_risk\": 1.41937704582e-5,",
							"        \"coef_tech\": Length[16],",
							"        \"coef_telecom\": Length[16],",
							"        \"coef_transport\": Length[16],",
							"        \"coef_traver\": 0,",
							"        \"currency_code\": \"RUB\",",
							"        \"duration3\": Length[6],",
							"        \"duration_mod\": Length[6],",
							"        \"f1\": Length[16],",
							"        \"f2\": Length[16],",
							"        \"hh\": Length[16],",
							"        \"il\": Length[16],",
							"        \"il4\": Length[16],",
							"        \"index_code\": \"\",",
							"        \"industry\": \"Муниципалитеты\",",
							"        \"isin\": \"RU000A0JNYN1\",",
							"        \"ispread2\": Length[6],",
							"        \"lbound1\": Length[6],",
							"        \"lbound2\": Length[6],",
							"        \"lbound3\": Length[6],",
							"        \"method1_price\": Length[6],",
							"        \"method2_price\": Length[6],",
							"        \"method3_price\": Length[6],",
							"        \"method_number\": 3,",
							"        \"ndc_code\": \"RU000A0JNYN1\",",
							"        \"nominal\": Length[6],",
							"        \"num_trades\": 1243,",
							"        \"on_the_run\": 0,",
							"        \"r1\": Length[6],",
							"        \"r2\": Length[6],",
							"        \"r3\": Length[6],",
							"        \"rating\": 9,",
							"        \"reliability_threshold\": Length[16],",
							"        \"rho\": Length[16],",
							"        \"sigma2\": Length[16],",
							"        \"sigma_nu\": Length[16],",
							"        \"type\": \"bond\",",
							"        \"ubound1\": Length[6],",
							"        \"ubound2\": Length[6],",
							"        \"ubound3\": Length[6],",
							"        \"val_date\": \"2019-09-18\",",
							"        \"valuation_price\": Length[6],",
							"        \"valuation_price_lbound\": Length[6],",
							"        \"valuation_price_pct\": Length[6],",
							"        \"valuation_price_ubound\": Length[6],",
							"        \"wa_duration\": Length[4],",
							"        \"wa_ispread\": Length[4],",
							"        \"wa_zspread\": Length[4],",
							"        \"waprice\": Length[6],",
							"        \"yield1\": Length[6],",
							"        \"yield2\": Length[6],",
							"        \"yield3\": Length[6],",
							"        \"yieldatwap\": Length[2],",
							"        \"zspread3\": Length[6],",
							"        \"zspread3_date\": \"2022-06-14\"",
							"    }",
							"pm.environment.set(\"Obj_EXT_templ\", Obj_EXT_temp);  ",
							"",
							"//блок настроек для val_new",
							"var Obj_NEW_temp ={",
							"        \"_p\": [",
							"            1",
							"        ],",
							"        \"acc_int\": \"20\",",
							"        \"currency_code\": \"RUB\",",
							"        \"est_date\": \"13.08.2019 00:00:00\",",
							"        \"isin\": \"RU000A0JR5F7\",",
							"        \"issuer\": \"ДОМ.РФ\",",
							"        \"method_number\": 3,",
							"        \"name\": \"Неконвертируемые документарные купонные облигации на предъявителя серии А17\",",
							"        \"nominal\":Length[6],",
							"        \"nsd_code\": \"RU000A0JR5F7\",",
							"        \"price\": Length[6],",
							"        \"rate\": Length[2],",
							"        \"rate_lbound\": Length[2],",
							"        \"rate_ubound\": Length[2],",
							"        \"reg_number\": \"4-17-00739-A\",",
							"        \"type\": \"bond\",",
							"        \"val_date\": \"2019-08-13\",",
							"        \"version\": 2,",
							"        \"yield\": Length[6]",
							"    }",
							"pm.environment.set(\"Obj_NEW_templ\", Obj_NEW_temp);  ",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "24afe833-0049-47fe-a1e1-52d5bb4a6c5e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c1973f8f-a4a5-41e7-b94a-2735e032b6eb",
				"type": "text/javascript",
				"exec": [
					"//копи-паста для настройки даты",
					"var dateFormat = function () {",
					"\tvar\ttoken = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,",
					"\t\ttimezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,",
					"\t\ttimezoneClip = /[^-+\\dA-Z]/g,",
					"\t\tpad = function (val, len) {",
					"\t\t\tval = String(val);",
					"\t\t\tlen = len || 2;",
					"\t\t\twhile (val.length < len) val = \"0\" + val;",
					"\t\t\treturn val;",
					"\t\t};",
					"",
					"\t// Regexes and supporting functions are cached through closure",
					"\treturn function (date, mask, utc) {",
					"\t\tvar dF = dateFormat;",
					"",
					"\t\t// You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)",
					"\t\tif (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {",
					"\t\t\tmask = date;",
					"\t\t\tdate = undefined;",
					"\t\t}",
					"",
					"\t\t// Passing date through Date applies Date.parse, if necessary",
					"\t\tdate = date ? new Date(date) : new Date;",
					"\t\tif (isNaN(date)) throw SyntaxError(\"invalid date\");",
					"",
					"\t\tmask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);",
					"",
					"\t\t// Allow setting the utc argument via the mask",
					"\t\tif (mask.slice(0, 4) == \"UTC:\") {",
					"\t\t\tmask = mask.slice(4);",
					"\t\t\tutc = true;",
					"\t\t}",
					"",
					"\t\tvar\t_ = utc ? \"getUTC\" : \"get\",",
					"\t\t\td = date[_ + \"Date\"](),",
					"\t\t\tD = date[_ + \"Day\"](),",
					"\t\t\tm = date[_ + \"Month\"](),",
					"\t\t\ty = date[_ + \"FullYear\"](),",
					"\t\t\tH = date[_ + \"Hours\"](),",
					"\t\t\tM = date[_ + \"Minutes\"](),",
					"\t\t\ts = date[_ + \"Seconds\"](),",
					"\t\t\tL = date[_ + \"Milliseconds\"](),",
					"\t\t\to = utc ? 0 : date.getTimezoneOffset(),",
					"\t\t\tflags = {",
					"\t\t\t\td:    d,",
					"\t\t\t\tdd:   pad(d),",
					"\t\t\t\tddd:  dF.i18n.dayNames[D],",
					"\t\t\t\tdddd: dF.i18n.dayNames[D + 7],",
					"\t\t\t\tm:    m + 1,",
					"\t\t\t\tmm:   pad(m + 1),",
					"\t\t\t\tmmm:  dF.i18n.monthNames[m],",
					"\t\t\t\tmmmm: dF.i18n.monthNames[m + 12],",
					"\t\t\t\tyy:   String(y).slice(2),",
					"\t\t\t\tyyyy: y,",
					"\t\t\t\th:    H % 12 || 12,",
					"\t\t\t\thh:   pad(H % 12 || 12),",
					"\t\t\t\tH:    H,",
					"\t\t\t\tHH:   pad(H),",
					"\t\t\t\tM:    M,",
					"\t\t\t\tMM:   pad(M),",
					"\t\t\t\ts:    s,",
					"\t\t\t\tss:   pad(s),",
					"\t\t\t\tl:    pad(L, 3),",
					"\t\t\t\tL:    pad(L > 99 ? Math.round(L / 10) : L),",
					"\t\t\t\tt:    H < 12 ? \"a\"  : \"p\",",
					"\t\t\t\ttt:   H < 12 ? \"am\" : \"pm\",",
					"\t\t\t\tT:    H < 12 ? \"A\"  : \"P\",",
					"\t\t\t\tTT:   H < 12 ? \"AM\" : \"PM\",",
					"\t\t\t\tZ:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),",
					"\t\t\t\to:    (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),",
					"\t\t\t\tS:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]",
					"\t\t\t};",
					"",
					"\t\treturn mask.replace(token, function ($0) {",
					"\t\t\treturn $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);",
					"\t\t});",
					"\t};",
					"}();",
					"dateFormat.masks = {",
					"\t\"default\":      \"ddd mmm dd yyyy HH:MM:ss\",",
					"\tshortDate:      \"m/d/yy\",",
					"\tmediumDate:     \"mmm d, yyyy\",",
					"\tlongDate:       \"mmmm d, yyyy\",",
					"\tfullDate:       \"dddd, mmmm d, yyyy\",",
					"\tshortTime:      \"h:MM TT\",",
					"\tmediumTime:     \"h:MM:ss TT\",",
					"\tlongTime:       \"h:MM:ss TT Z\",",
					"\tisoDate:        \"yyyy-mm-dd\",",
					"\tisoTime:        \"HH:MM:ss\",",
					"\tisoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",",
					"\tisoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"",
					"};// Some common format strings",
					"dateFormat.i18n = {",
					"\tdayNames: [",
					"\t\t\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",",
					"\t\t\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"",
					"\t],",
					"\tmonthNames: [",
					"\t\t\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",",
					"\t\t\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"",
					"\t]",
					"};// Internationalization strings",
					"Date.prototype.format = function (mask, utc) {",
					"\treturn dateFormat(this, mask, utc);",
					"};// For convenience...",
					"//",
					"",
					"",
					"",
					"workdays1= [",
					"         \"2020-01-03\"",
					"        ,\"2020-01-06\"",
					"        ,\"2020-01-08\"",
					"        ,\"2020-01-13\"",
					"        ,\"2020-01-14\"",
					"        ,\"2020-01-15\"",
					"        ,\"2020-01-16\"",
					"        ,\"2020-01-17\"",
					"        ,\"2020-01-20\"",
					"        ,\"2020-01-21\"",
					"        ,\"2020-01-22\"",
					"        ,\"2020-01-23\"",
					"        ,\"2020-01-24\"",
					"        ,\"2020-01-27\"",
					"        ,\"2020-01-28\"",
					"        ,\"2020-01-29\"",
					"        ,\"2020-01-30\"",
					"        ,\"2020-01-31\"",
					"        ,\"2020-02-03\"",
					"        ,\"2020-02-04\"",
					"        ,\"2020-02-05\"",
					"        ,\"2020-02-06\"",
					"        ,\"2020-02-07\"",
					"        ,\"2020-02-10\"",
					"        ,\"2020-02-11\"",
					"        ,\"2020-02-12\"",
					"        ,\"2020-02-13\"",
					"        ,\"2020-02-14\"",
					"        ,\"2020-02-17\"",
					"        ,\"2020-02-18\"",
					"        ,\"2020-02-19\"",
					"        ,\"2020-02-20\"",
					"        ,\"2020-02-21\"",
					"        ,\"2020-02-25\"",
					"        ,\"2020-02-26\"",
					"        ,\"2020-02-27\"",
					"        ,\"2020-02-28\"",
					"        ,\"2020-03-02\"",
					"        ,\"2020-03-03\"",
					"        ,\"2020-03-04\"",
					"        ,\"2020-03-05\"",
					"        ,\"2020-03-06\"",
					"        ,\"2020-03-10\"",
					"        ,\"2020-03-11\"",
					"        ,\"2020-03-12\"",
					"        ,\"2020-03-13\"",
					"        ,\"2020-03-16\"",
					"        ,\"2020-03-17\"",
					"        ,\"2020-03-18\"",
					"        ,\"2020-03-19\"",
					"        ,\"2020-03-20\"",
					"        ,\"2020-03-23\"",
					"        ,\"2020-03-24\"",
					"        ,\"2020-03-25\"",
					"        ,\"2020-03-26\"",
					"        ,\"2020-03-27\"",
					"        ,\"2020-03-30\"",
					"        ,\"2020-03-31\"",
					"        ,\"2020-04-01\"",
					"        ,\"2020-04-02\"",
					"        ,\"2020-04-03\"",
					"        ,\"2020-04-06\"",
					"        ,\"2020-04-07\"",
					"        ,\"2020-04-08\"",
					"        ,\"2020-04-09\"",
					"        ,\"2020-04-10\"",
					"        ,\"2020-04-13\"",
					"        ,\"2020-04-14\"",
					"        ,\"2020-04-15\"",
					"        ,\"2020-04-16\"",
					"        ,\"2020-04-17\"",
					"        ,\"2020-04-20\"",
					"        ,\"2020-04-21\"",
					"        ,\"2020-04-22\"",
					"        ,\"2020-04-23\"",
					"        ,\"2020-04-24\"",
					"        ,\"2020-04-27\"",
					"        ,\"2020-04-28\"",
					"        ,\"2020-04-29\"",
					"        ,\"2020-04-30\"",
					"        ,\"2020-05-04\"",
					"        ,\"2020-05-05\"",
					"        ,\"2020-05-06\"",
					"        ,\"2020-05-07\"",
					"        ,\"2020-05-08\"",
					"        ,\"2020-05-12\"",
					"        ,\"2020-05-13\"",
					"        ,\"2020-05-14\"",
					"        ,\"2020-05-15\"",
					"        ,\"2020-05-18\"",
					"        ,\"2020-05-19\"",
					"        ,\"2020-05-20\"",
					"        ,\"2020-05-21\"",
					"        ,\"2020-05-22\"",
					"        ,\"2020-05-25\"",
					"        ,\"2020-05-26\"",
					"        ,\"2020-05-27\"",
					"        ,\"2020-05-28\"",
					"        ,\"2020-05-29\"",
					"        ,\"2020-06-01\"",
					"        ,\"2020-06-02\"",
					"        ,\"2020-06-03\"",
					"        ,\"2020-06-04\"",
					"        ,\"2020-06-05\"",
					"        ,\"2020-06-08\"",
					"        ,\"2020-06-09\"",
					"        ,\"2020-06-10\"",
					"        ,\"2020-06-11\"",
					"        ,\"2020-06-15\"",
					"        ,\"2020-06-16\"",
					"        ,\"2020-06-17\"",
					"        ,\"2020-06-18\"",
					"        ,\"2020-06-19\"",
					"        ,\"2020-06-22\"",
					"        ,\"2020-06-23\"",
					"        ,\"2020-06-24\"",
					"        ,\"2020-06-25\"",
					"        ,\"2020-06-26\"",
					"        ,\"2020-06-29\"",
					"        ,\"2020-06-30\"",
					"        ,\"2020-07-01\"",
					"        ,\"2020-07-02\"",
					"        ,\"2020-07-03\"",
					"        ,\"2020-07-06\"",
					"        ,\"2020-07-07\"",
					"        ,\"2020-07-08\"",
					"        ,\"2020-07-09\"",
					"        ,\"2020-07-10\"",
					"        ,\"2020-07-13\"",
					"        ,\"2020-07-14\"",
					"        ,\"2020-07-15\"",
					"        ,\"2020-07-16\"",
					"        ,\"2020-07-17\"",
					"        ,\"2020-07-20\"",
					"        ,\"2020-07-21\"",
					"        ,\"2020-07-22\"",
					"        ,\"2020-07-23\"",
					"        ,\"2020-07-24\"",
					"        ,\"2020-07-27\"",
					"        ,\"2020-07-28\"",
					"        ,\"2020-07-29\"",
					"        ,\"2020-07-30\"",
					"        ,\"2020-07-31\"",
					"        ,\"2020-08-03\"",
					"        ,\"2020-08-04\"",
					"        ,\"2020-08-05\"",
					"        ,\"2020-08-06\"",
					"        ,\"2020-08-07\"",
					"        ,\"2020-08-10\"",
					"        ,\"2020-08-11\"",
					"        ,\"2020-08-12\"",
					"        ,\"2020-08-13\"",
					"        ,\"2020-08-14\"",
					"        ,\"2020-08-17\"",
					"        ,\"2020-08-18\"",
					"        ,\"2020-08-19\"",
					"        ,\"2020-08-20\"",
					"        ,\"2020-08-21\"",
					"        ,\"2020-08-24\"",
					"        ,\"2020-08-25\"",
					"        ,\"2020-08-26\"",
					"        ,\"2020-08-27\"",
					"        ,\"2020-08-28\"",
					"        ,\"2020-08-31\"",
					"        ,\"2020-09-01\"",
					"        ,\"2020-09-02\"",
					"        ,\"2020-09-03\"",
					"        ,\"2020-09-04\"",
					"        ,\"2020-09-07\"",
					"        ,\"2020-09-08\"",
					"        ,\"2020-09-09\"",
					"        ,\"2020-09-10\"",
					"        ,\"2020-09-11\"",
					"        ,\"2020-09-14\"",
					"        ,\"2020-09-15\"",
					"        ,\"2020-09-16\"",
					"        ,\"2020-09-17\"",
					"        ,\"2020-09-18\"",
					"        ,\"2020-09-21\"",
					"        ,\"2020-09-22\"",
					"        ,\"2020-09-23\"",
					"        ,\"2020-09-24\"",
					"        ,\"2020-09-25\"",
					"        ,\"2020-09-28\"",
					"        ,\"2020-09-29\"",
					"        ,\"2020-09-30\"",
					"        ,\"2020-10-01\"",
					"        ,\"2020-10-02\"",
					"        ,\"2020-10-05\"",
					"        ,\"2020-10-06\"",
					"        ,\"2020-10-07\"",
					"        ,\"2020-10-08\"",
					"        ,\"2020-10-09\"",
					"        ,\"2020-10-12\"",
					"        ,\"2020-10-13\"",
					"        ,\"2020-10-14\"",
					"        ,\"2020-10-15\"",
					"        ,\"2020-10-16\"",
					"        ,\"2020-10-19\"",
					"        ,\"2020-10-20\"",
					"        ,\"2020-10-21\"",
					"        ,\"2020-10-22\"",
					"        ,\"2020-10-23\"",
					"        ,\"2020-10-26\"",
					"        ,\"2020-10-27\"",
					"        ,\"2020-10-28\"",
					"        ,\"2020-10-29\"",
					"        ,\"2020-10-30\"",
					"        ,\"2020-11-02\"",
					"        ,\"2020-11-03\"",
					"        ,\"2020-11-05\"",
					"        ,\"2020-11-06\"",
					"        ,\"2020-11-09\"",
					"        ,\"2020-11-10\"",
					"        ,\"2020-11-11\"",
					"        ,\"2020-11-12\"",
					"        ,\"2020-11-13\"",
					"        ,\"2020-11-16\"",
					"        ,\"2020-11-17\"",
					"        ,\"2020-11-18\"",
					"        ,\"2020-11-19\"",
					"        ,\"2020-11-20\"",
					"        ,\"2020-11-23\"",
					"        ,\"2020-11-24\"",
					"        ,\"2020-11-25\"",
					"        ,\"2020-11-26\"",
					"        ,\"2020-11-27\"",
					"        ,\"2020-11-30\"",
					"        ,\"2020-12-01\"",
					"        ,\"2020-12-02\"",
					"        ,\"2020-12-03\"",
					"        ,\"2020-12-04\"",
					"        ,\"2020-12-07\"",
					"        ,\"2020-12-08\"",
					"        ,\"2020-12-09\"",
					"        ,\"2020-12-10\"",
					"        ,\"2020-12-11\"",
					"        ,\"2020-12-14\"",
					"        ,\"2020-12-15\"",
					"        ,\"2020-12-16\"",
					"        ,\"2020-12-17\"",
					"        ,\"2020-12-18\"",
					"        ,\"2020-12-21\"",
					"        ,\"2020-12-22\"",
					"        ,\"2020-12-23\"",
					"        ,\"2020-12-24\"",
					"        ,\"2020-12-25\"",
					"        ,\"2020-12-28\"",
					"        ,\"2020-12-29\"",
					"        ,\"2020-12-30\"",
					"        ,\"2020-12-31\"",
					"        ,\"2021-01-13\"",
					"        ,\"2021-01-14\"",
					"        ,\"2021-01-15\"",
					"        ,\"2021-01-18\"",
					"        ,\"2021-01-19\"",
					"        ,\"2021-01-20\"",
					"        ,\"2021-01-21\"",
					"        ,\"2021-01-22\"",
					"        ,\"2021-01-25\"",
					"        ,\"2021-01-26\"",
					"        ,\"2021-01-27\"",
					"        ,\"2021-01-28\"",
					"        ]",
					"pm.environment.set(\"workdays\", workdays1);",
					"",
					"",
					"",
					"",
					" function WorkDayBefore(day,array)",
					"{",
					"  safe=20;",
					"  var last_work_day=new Date();",
					"  last_work_day=day;",
					"  do {",
					"  last_work_day.setDate(last_work_day.getDate()-1);",
					"  safe--;",
					"  if (safe===0) {console.log(\"Выход с ошибкой, видимо календарь истек, причем давно\" + safe); last_work_day=\"КОНЕЦ КАЛЕНДАРЯ!!!\"; break}",
					"} while (array.findIndex(x => x == last_work_day.format(\"isoDate\"))<0);",
					"  return last_work_day;",
					"}",
					"",
					"",
					"",
					"var now_day=new Date();",
					"console.log(\"Сегодня: \"+now_day.format(\"isoDate\"));",
					"day2=WorkDayBefore( now_day,pm.environment.get(\"workdays\"));",
					"console.log(\"Второй день,который смотрим: \"+day2.format(\"isoDate\"));",
					"pm.environment.set(\"date_two\",day2.format(\"isoDate\") );",
					"console.log(\"установлено значение второго дня:\" + pm.environment.get(\"date_two\"))",
					"day1=WorkDayBefore( day2,pm.environment.get(\"workdays\"));",
					"pm.environment.set(\"date_one\",day1.format(\"isoDate\") );",
					"console.log(\"установлено значение первого дня:\" + pm.environment.get(\"date_one\"))",
					"",
					"",
					"console.log(\"Первый день,который смотрим: \"+day1.format(\"isoDate\"));",
					"",
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "13ec4816-73cb-47c2-9f0b-f69f979d99f5",
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"expression=(pm.environment.get(\"workdays\").length)-(pm.environment.get(\"workdays\").findIndex(x => x == pm.environment.get(\"date_two\")));//длинна календаря-номер дня в календаре=количество оставшихся рабочих дней",
					"",
					"",
					"if (expression<5){tests[\"Осталось: \"+pm.environment.get(\"workdays\").length+\"дня\"] = false}",
					"else if (expression<10){tests[\"Осталось: \"+pm.environment.get(\"workdays\").length+\"дней\"] = false}",
					"else if (expression<20){tests[\"РАБОЧИЕ ДНИ ИСТЕКАЮТ,УРА!!! осталось:\"+pm.environment.get(\"workdays\").length] = false}"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}